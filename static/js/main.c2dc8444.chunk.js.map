{"version":3,"sources":["components/dialog/DiaInput.tsx","components/dialog/dialog.tsx","images/backgrounds/background.jpg","images/backgrounds/testroom.jpg","images/characters/waifu/waifu.ts","images/characters/waifu/waifu_happy.png","images/characters/waifu/waifu-positive.mp4","images/characters/waifu/waifu-standart.mp4","images/characters/waifu/waifu-negative.mp4","components/character/character.tsx","App.tsx","components/fetchChat.ts","components/socket.ts","index.tsx"],"names":["DiaInput","sendMessage","useState","currentInput","setInput","className","action","onSubmit","e","preventDefault","type","onChange","target","value","characterColors","Waifu","clr","Semen","Dialog","dialog","listRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","map","character_name","text","pk","style","color","waifu","happy","img","positive","standart","negative","Character","position","character","emotion","console","log","autoPlay","loop","muted","src","App","setDialog","account","setAccount","currentWaifuEmotion","setWaifuEmotion","addDialogMessage","message","curDia","fetchChat","a","fetch","process","CHAT_API","json","fetchedChats","chats","Object","values","length","error","initChat","useCallback","chat","messages","sort","b","Number","timestamp","then","reason","useInitChat","socket","WebSocket","WS_CHAT_API","onopen","onmessage","newMessage","data","emotions","NEGATIVE","NEUTRAL","POSITIVE","convertWaifuEmotion","useSocket","background","alt","msg","randomUUID","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ylBA6BeA,EAtBE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAClB,EAAiCC,mBAAiB,IAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KAMA,OACE,uBACEC,UAAU,WACVC,OAAO,IACPC,SAAU,SAACC,GACTA,EAAEC,iBACFR,EAAYE,IALhB,UAQE,uBAAOO,KAAK,OAAOC,SAbuC,SAACH,GAC7DJ,EAASI,EAAEI,OAAOC,UAahB,iCAAS,UCXTC,G,OAAmD,CACvDC,MAAO,CACLC,IAAK,WAEPC,MAAO,CACLD,IAAK,aAmCME,EA/BA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OACVC,EAAUC,mBAQhB,OANAC,qBAAU,YACR,OAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAASG,WACXH,EAAQG,QAAQC,UAAYJ,EAAQG,QAAQE,gBAE7C,CAACN,IAGF,yBAASd,UAAU,SAASqB,IAAKN,EAAjC,SACGD,EAAOQ,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,GAAzB,OACV,sBAEEzB,UAAS,sBAAoC,UAAnBuB,EAA6B,QAAU,IAFnE,UAIE,oBACEG,MAAO,CAAEC,MAAOlB,EAAgBc,GAAgBZ,KAChDX,UAAU,iBAFZ,SAIGuB,IAEH,qBAAKvB,UAAU,OAAf,SACE,4BAAIwB,QAVDC,S,mCCnCA,GCAA,IDAA,IAA0B,wCEyB1BG,EAlBW,CACxBC,MAAO,CACLC,ICTW,IAA0B,yCDcvCC,SAAU,CACRD,IEfW,IAA0B,4CFiBvCE,SAAU,CACRF,IGlBW,IAA0B,4CHoBvCG,SAAU,CACRH,IIrBW,IAA0B,6CCmB1BI,G,OAVG,SAAC,GAAqD,EAAnDC,SAAoD,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,QAGxC,OADAC,QAAQC,IAAIH,EAAUC,GAASP,KAE7B,uBAAO9B,UAAU,iBAAiBwC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAArD,SACE,wBAAQC,IAAKP,EAAUC,GAASP,IAAKzB,KAAK,kBC8CjCuC,G,cA/CH,WACV,MAA4B/C,mBAA0B,CACpD,CACE2B,KAAM,OACND,eAAgB,QAChBE,GAAI,KAEN,CACED,KAAM,SACND,eAAgB,QAChBE,GAAI,KAEN,CACED,KAAM,yFACND,eAAgB,QAChBE,GAAI,OAdR,mBAAOX,EAAP,KAAe+B,EAAf,KAkBA,EAA8BhD,qBAA9B,mBAAOiD,EAAP,KAAgBC,EAAhB,KACA,EAA+ClD,mBAAkB,YAAjE,mBAAOmD,EAAP,KAA4BC,EAA5B,KAEMC,EAAmB,SAACC,GACxBN,GAAU,SAACO,GAAD,4BAAgBA,GAAhB,CAAwBD,QAUpC,OCxByB,SACzBN,EACAE,GAEA,IAAMM,EAAS,uCAAG,8BAAAC,EAAA,+EAGNC,MAAM,GAAD,OAAIC,sLAAYC,SAAhB,YAHC,8BAIZC,OAJY,UAERC,EAFQ,OAOO,KAFfC,EAAQC,OAAOC,OAAOH,EAAaC,QAE/BG,OAPI,wBAQZzB,QAAQ0B,MAAM,uBARF,oDAYPJ,EAAM,IAZC,kCAcdtB,QAAQ0B,MAAR,MAdc,0DAAH,qDAkBTC,EAAWC,uBACf,SACEC,EACAtB,GAEA,IAAKsB,EAAM,OAAO7B,QAAQ0B,MAAM,qBAChCjB,EAAWoB,EAAKrB,SAChBR,QAAQC,IAAI,eACZM,GAAU,kBACRsB,EAAKC,SACFC,MAAK,SAACf,EAAGgB,GAAJ,OAAUC,OAAOjB,EAAEkB,WAAaD,OAAOD,EAAEE,cAC9ClD,KAAI,YACH,MAAO,CAAEE,KADY,EAAfA,KACSC,GADM,EAATA,GACOF,eAAgB,iBAI3C,CAACwB,IAGH9B,qBAAU,WACRoC,IAAYoB,MACV,SAACN,GAAD,OAAUF,EAASE,EAAMtB,MACzB,SAAC6B,GAAD,OAAYpC,QAAQ0B,MAAMU,QAE3B,CAAC7B,EAAWoB,ID1BfU,CAAY9B,EAAWE,GE9BA,SACvBE,EACAH,EACAI,GAEAjC,qBAAU,WACR,IAAK6B,EAAS,OAAOR,QAAQ0B,MAAM,wBAEnC,IAAMY,EAAS,IAAIC,UAAJ,UAAiBrB,sLAAYsB,YAA7B,kBAAkDhC,IAEjE8B,EAAOG,OAAS,SAAC5E,GAEfmC,QAAQC,IAAI,kBAGdqC,EAAOI,UAAY,SAAC7E,GAElB,IAAM8E,EAAa9E,EAAE+E,KACrB5C,QAAQC,IAAI,uBAAwB0C,GACpC,IAAQE,EAAuBF,EAAvBE,SAAU1D,EAAawD,EAAbxD,GAAID,EAASyD,EAATzD,KAChBa,EA5BgB,SAAC,GAAmD,IAAjD+C,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,SAGhD,OAAIA,EAAWF,GAAYE,EAAWD,EAAgB,WAClDD,EAAWE,GAAYF,EAAWC,EAAgB,WAC/C,WAuBaE,CAAoBJ,GAEpCjC,EAAiB,CAAE1B,OAAMC,KAAIF,eAAgB,UAE7C0B,EAAgBZ,MAEjB,CAACS,EAASG,EAAiBC,IFM9BsC,CAAUvC,EAAiBH,EAASI,GAGlC,qBAAKlD,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAK2C,IAAK8C,EAAYzF,UAAU,MAAM0F,IAAI,eAC1C,yBAAS1F,UAAU,aAAnB,SACG,cAAC,EAAD,CAAWoC,UAAWR,EAAOS,QAASW,MAEzC,cAAC,EAAD,CAAQlC,OAAQA,IAChB,cAAC,EAAD,CAAUlB,YAhBI,SAAC+F,GACnBzC,EAAiB,CAAE1B,KAAMmE,EAAKpE,eAAgB,QAASE,GAAImE,mCGjC/DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2dc8444.chunk.js","sourcesContent":["import { ChangeEventHandler, useState } from \"react\";\nimport \"./diaInput.scss\";\n\ntype DiaInputProps = {\n  sendMessage: (msg: string) => void;\n};\n\nconst DiaInput = ({ sendMessage }: DiaInputProps) => {\n  const [currentInput, setInput] = useState<string>(\"\");\n\n  const setInputHandler: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <form\n      className=\"diaInput\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        sendMessage(currentInput);\n      }}\n    >\n      <input type=\"text\" onChange={setInputHandler} />\n      <button>{\">\"}</button>\n    </form>\n  );\n};\n\nexport default DiaInput;\n","import { useEffect, useRef } from \"react\";\nimport \"./dialog.scss\";\n\nexport type DialogMessage = {\n  text: string;\n  character_name: string;\n  pk: string;\n};\n\ntype DialogProps = {\n  dialog: DialogMessage[];\n};\n\nconst characterColors: Record<string, { clr: string }> = {\n  Waifu: {\n    clr: \"#FDBC00\",\n  },\n  Semen: {\n    clr: \"#3DD643\",\n  },\n};\n\nconst Dialog = ({ dialog }: DialogProps) => {\n  const listRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n\n  useEffect(() => {\n    if (listRef?.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight;\n    }\n  }, [dialog]);\n\n  return (\n    <section className=\"dialog\" ref={listRef}>\n      {dialog.map(({ character_name, text, pk }) => (\n        <div\n          key={pk}\n          className={`dialogEntry ${character_name === \"Waifu\" ? \"Waifu\" : \"\"}`}\n        >\n          <h4\n            style={{ color: characterColors[character_name].clr }}\n            className=\"character_name\"\n          >\n            {character_name}\n          </h4>\n          <div className=\"text\">\n            <p>{text}</p>\n          </div>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default Dialog;\n","export default __webpack_public_path__ + \"static/media/background.4fd85e44.jpg\";","export default __webpack_public_path__ + \"static/media/testroom.e988a775.jpg\";","import { CharacterT } from \"@ctypes/character\";\nimport happyImg from \"./waifu_happy.png\";\n// import standartImg from \"./waifu_standart.png\";\nimport positiveVid from \"./waifu-positive.mp4\";\nimport standartVid from \"./waifu-standart.mp4\";\nimport negativeVid from \"./waifu-negative.mp4\";\n\nconst waifu: CharacterT = {\n  happy: {\n    img: happyImg,\n  },\n  // standart: {\n  //   img: standartImg,\n  // },\n  positive: {\n    img: positiveVid,\n  },\n  standart: {\n    img: standartVid,\n  },\n  negative: {\n    img: negativeVid,\n  },\n};\n\nexport default waifu;\n","export default __webpack_public_path__ + \"static/media/waifu_happy.eae5a9bf.png\";","export default __webpack_public_path__ + \"static/media/waifu-positive.3c8b2285.mp4\";","export default __webpack_public_path__ + \"static/media/waifu-standart.db35702b.mp4\";","export default __webpack_public_path__ + \"static/media/waifu-negative.8f105a61.mp4\";","import { CharacterT, Emotion } from \"@ctypes/character\";\nimport \"./character.scss\";\n\ntype CharacterProps = {\n  position?: \"LEFT | CENTER | RIGHT\";\n  character: CharacterT;\n  emotion: Emotion;\n};\n\nconst Character = ({ position, character, emotion }: CharacterProps) => {\n  //return <img src={character[emotion].img} className=\"character left\" />;\n  console.log(character[emotion].img);\n  return (\n    <video className=\"character left\" autoPlay loop muted>\n      <source src={character[emotion].img} type=\"video/mp4\" />\n    </video>\n  );\n};\n\nexport default Character;\n","import { useState } from \"react\";\nimport DiaInput from \"./components/dialog/DiaInput\";\nimport Dialog, { DialogMessage } from \"./components/dialog/dialog\";\nimport { randomUUID } from \"crypto\";\nimport { useInitChat } from \"./components/fetchChat\";\nimport { useSocket } from \"./components/socket\";\nimport { background } from \"@backgrounds/bcgIndex\";\nimport waifu from \"@characters/waifu/waifu\";\nimport Character from \"./components/character/character\";\nimport { Emotion } from \"@ctypes/character\";\nimport \"./App.scss\";\nimport \"./styles/novelWrapper.scss\";\n\nconst App = () => {\n  const [dialog, setDialog] = useState<DialogMessage[]>([\n    {\n      text: \"Nyet\",\n      character_name: \"Waifu\",\n      pk: \"1\",\n    },\n    {\n      text: \"Pamagi\",\n      character_name: \"Semen\",\n      pk: \"2\",\n    },\n    {\n      text: \"Whoooma apoooma a aboba perdola. Superhyper gigachad. Hhuy uu ii asli epasue. Saoeurp.\",\n      character_name: \"Semen\",\n      pk: \"3\",\n    },\n  ]);\n\n  const [account, setAccount] = useState<string | undefined>();\n  const [currentWaifuEmotion, setWaifuEmotion] = useState<Emotion>(\"standart\");\n\n  const addDialogMessage = (message: DialogMessage) => {\n    setDialog((curDia) => [...curDia, message]);\n  };\n  const sendMessage = (msg: string) => {\n    addDialogMessage({ text: msg, character_name: \"Semen\", pk: randomUUID() });\n  };\n\n  useInitChat(setDialog, setAccount);\n\n  useSocket(setWaifuEmotion, account, addDialogMessage);\n\n  return (\n    <div className=\"App\">\n      <div className=\"novelWrapper\">\n        <img src={background} className=\"bcg\" alt=\"Background\" />\n        <section className=\"characters\">\n          {<Character character={waifu} emotion={currentWaifuEmotion} />}\n        </section>\n        <Dialog dialog={dialog} />\n        <DiaInput sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Dispatch, SetStateAction, useCallback, useEffect } from \"react\";\nimport { DialogMessage } from \"./dialog/dialog\";\n\nexport type BackEmotions = Record<\"POSITIVE\" | \"NEGATIVE\" | \"NEUTRAL\", number>;\n\nexport type BackMessage = {\n  text: string;\n  timestamp: string;\n  emotions: BackEmotions;\n  pk: string;\n};\n\ntype BackendChat = {\n  account: string;\n  timestamp: string;\n  messages: BackMessage[];\n};\n\ntype BackendChats = {\n  chats: Record<string, BackendChat>;\n};\n\nexport const useInitChat = (\n  setDialog: Dispatch<SetStateAction<DialogMessage[]>>,\n  setAccount: Dispatch<SetStateAction<string | undefined>>\n) => {\n  const fetchChat = async () => {\n    try {\n      const fetchedChats = (await (\n        await fetch(`${process.env.CHAT_API}/chats/`)\n      ).json()) as BackendChats;\n      const chats = Object.values(fetchedChats.chats);\n\n      if (chats.length === 0) {\n        console.error(\"/chats/ is empty :C\");\n        return;\n      }\n\n      return chats[0];\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const initChat = useCallback(\n    (\n      chat: BackendChat | undefined,\n      setDialog: Dispatch<SetStateAction<DialogMessage[]>>\n    ) => {\n      if (!chat) return console.error(\"Chat is undefined\");\n      setAccount(chat.account);\n      console.log(\"SET ACCOUNT\");\n      setDialog(() =>\n        chat.messages\n          .sort((a, b) => Number(a.timestamp) - Number(b.timestamp))\n          .map(({ text, pk }) => {\n            return { text, pk, character_name: \"Waifu\" };\n          })\n      );\n    },\n    [setAccount]\n  );\n\n  useEffect(() => {\n    fetchChat().then(\n      (chat) => initChat(chat, setDialog),\n      (reason) => console.error(reason)\n    );\n  }, [setDialog, initChat]);\n};\n","import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { DialogMessage } from \"./dialog/dialog\";\nimport { BackEmotions, BackMessage } from \"./fetchChat\";\n\nconst convertWaifuEmotion = ({ NEGATIVE, NEUTRAL, POSITIVE }: BackEmotions) => {\n  // return Object.entries(emotions).sort((a, b) => a[1] - b[1])[0];\n  // if (POSITIVE > NEGATIVE && POSITIVE > NEUTRAL) return \"happy\";\n  if (POSITIVE > NEGATIVE && POSITIVE > NEUTRAL) return \"positive\";\n  if (NEGATIVE > POSITIVE && NEGATIVE > NEUTRAL) return \"negative\";\n  return \"standart\";\n};\n\nexport const useSocket = (\n  setWaifuEmotion: Dispatch<SetStateAction<string>>,\n  account: string | undefined,\n  addDialogMessage: (message: DialogMessage) => void\n) => {\n  useEffect(() => {\n    if (!account) return console.error(\"Account is undefined\");\n\n    const socket = new WebSocket(`${process.env.WS_CHAT_API}/chats/${account}`);\n\n    socket.onopen = (e) => {\n      // socket.send(\"Hello, server\");\n      console.log(\"SOCKET OPENED\");\n    };\n\n    socket.onmessage = (e) => {\n      // console.log(e);\n      const newMessage = e.data as BackMessage;\n      console.log(\"Received new message\", newMessage);\n      const { emotions, pk, text } = newMessage;\n      const emotion = convertWaifuEmotion(emotions);\n\n      addDialogMessage({ text, pk, character_name: \"Waifu\" });\n      // const waifuEmotion = String(e.data);\n      setWaifuEmotion(emotion);\n    };\n  }, [account, setWaifuEmotion, addDialogMessage]);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// reportWebVitals();\n"],"sourceRoot":""}