{"version":3,"sources":["images/backgrounds/background.jpg","images/backgrounds/testroom.jpg","components/character/character.tsx","components/dialog/dialog.tsx","components/dialog/DiaInput.tsx","images/characters/waifu/waifu.ts","images/characters/waifu/waifu_happy.png","images/characters/waifu/waifu-positive.mp4","images/characters/waifu/waifu-standart.mp4","images/characters/waifu/waifu-negative.mp4","components/fetchChat.ts","App.tsx","components/socket.ts","index.tsx"],"names":["Character","position","character","emotion","console","log","img","className","autoPlay","loop","muted","src","type","characterColors","Waifu","clr","Semen","Dialog","dialog","listRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","map","idx","character_name","text","style","color","DiaInput","sendMessage","useState","currentInput","setInput","action","onSubmit","e","preventDefault","onChange","target","value","waifu","happy","positive","standart","negative","useInitChat","setDialog","setAccount","fetchChat","a","fetch","json","initChat","chats","Object","values","then","chat","account","messages","backMessage","reason","error","App","currentWaifuEmotion","setWaifuEmotion","socket","WebSocket","onopen","onmessage","NEGATIVE","NEUTRAL","POSITIVE","convertWaifuEmotion","data","emotions","useSocket","background","msg","curDia","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d29f13a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.4fd85e44.jpg\";","export default __webpack_public_path__ + \"static/media/testroom.e988a775.jpg\";","import { CharacterT, Emotion } from \"@ctypes/character\";\n\ntype CharacterProps = {\n  position?: \"LEFT | CENTER | RIGHT\";\n  character: CharacterT;\n  emotion: Emotion;\n};\n\nconst Character = ({ position, character, emotion }: CharacterProps) => {\n  //return <img src={character[emotion].img} className=\"character left\" />;\n  console.log(character[emotion].img);\n  return (\n    <video className=\"character left\" autoPlay loop muted>\n      <source src={character[emotion].img} type=\"video/mp4\" />\n    </video>\n  );\n};\n\nexport default Character;\n","import { useEffect, useRef } from \"react\";\nimport \"./dialog.scss\";\n\nexport type DialogMessage = {\n  text: string;\n  character_name: string;\n};\n\ntype DialogProps = {\n  dialog: DialogMessage[];\n};\n\nconst characterColors: Record<string, { clr: string }> = {\n  Waifu: {\n    clr: \"#FDBC00\",\n  },\n  Semen: {\n    clr: \"#3DD643\",\n  },\n};\n\nconst Dialog = ({ dialog }: DialogProps) => {\n  const listRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n\n  useEffect(() => {\n    if (listRef?.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight;\n    }\n  }, [dialog]);\n\n  return (\n    <section className=\"dialog\" ref={listRef}>\n      {dialog.map(({ character_name, text }, idx) => (\n        <div\n          key={idx}\n          className={`dialogEntry ${character_name === \"Waifu\" ? \"Waifu\" : \"\"}`}\n        >\n          <h4\n            style={{ color: characterColors[character_name].clr }}\n            className=\"character_name\"\n          >\n            {character_name}\n          </h4>\n          <div className=\"text\">\n            <p>{text}</p>\n          </div>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default Dialog;\n","import { ChangeEventHandler, useState } from \"react\";\nimport \"./diaInput.scss\";\n\ntype DiaInputProps = {\n  sendMessage: (msg: string) => void;\n};\n\nconst DiaInput = ({ sendMessage }: DiaInputProps) => {\n  const [currentInput, setInput] = useState<string>(\"\");\n\n  const setInputHandler: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <form\n      className=\"diaInput\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        sendMessage(currentInput);\n      }}\n    >\n      <input type=\"text\" onChange={setInputHandler} />\n      <button>{\">\"}</button>\n    </form>\n  );\n};\n\nexport default DiaInput;\n","import { CharacterT } from \"@ctypes/character\";\nimport happyImg from \"./waifu_happy.png\";\nimport standartImg from \"./waifu_standart.png\";\nimport positiveVid from \"./waifu-positive.mp4\";\nimport standartVid from \"./waifu-standart.mp4\";\nimport negativeVid from \"./waifu-negative.mp4\";\n\nconst waifu: CharacterT = {\n  happy: {\n    img: happyImg,\n  },\n  // standart: {\n  //   img: standartImg,\n  // },\n  positive: {\n    img: positiveVid,\n  },\n  standart: {\n    img: standartVid,\n  },\n  negative: {\n    img: negativeVid,\n  },\n};\n\nexport default waifu;\n","export default __webpack_public_path__ + \"static/media/waifu_happy.eae5a9bf.png\";","export default __webpack_public_path__ + \"static/media/waifu-positive.3c8b2285.mp4\";","export default __webpack_public_path__ + \"static/media/waifu-standart.db35702b.mp4\";","export default __webpack_public_path__ + \"static/media/waifu-negative.8f105a61.mp4\";","import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { DialogMessage } from \"./dialog/dialog\";\n\nexport type BackEmotions = Record<\"POSITIVE\" | \"NEGATIVE\" | \"NEUTRAL\", number>;\n\nexport type BackMessage = {\n  text: string;\n  timestamp: string;\n  emotions: BackEmotions;\n  pk: string;\n};\n\ntype BackendChat = {\n  account: string;\n  timestamp: string;\n  messages: BackMessage[];\n};\n\ntype BackendChats = {\n  chats: Record<string, BackendChat>;\n};\n\nexport const useInitChat = (\n  setDialog: Dispatch<SetStateAction<DialogMessage[]>>,\n  setAccount: Dispatch<SetStateAction<string | undefined>>\n) => {\n  const fetchChat = async () => {\n    const initChat = (await (await fetch(\"/chats/\")).json()) as BackendChats;\n    const chats = Object.values(initChat.chats)[0];\n    return chats;\n  };\n\n  const initChat = (\n    chat: BackendChat,\n    setDialog: Dispatch<SetStateAction<DialogMessage[]>>\n  ) => {\n    setAccount(chat.account);\n    console.log(\"SET ACCOUNT\");\n    setDialog(() =>\n      chat.messages.map((backMessage) => {\n        return { text: backMessage.text, character_name: \"Waifu\" };\n      })\n    );\n  };\n\n  useEffect(() => {\n    fetchChat().then(\n      (chats) => initChat(chats, setDialog),\n      (reason) => console.error(reason)\n    );\n  }, [setDialog]);\n};\n","import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport examplia from \"@characters/examplia/examplia\";\nimport { background } from \"@backgrounds/bcgIndex\";\nimport \"./App.scss\";\nimport Character from \"./components/character/character\";\nimport Dialog, { DialogMessage } from \"./components/dialog/dialog\";\nimport DiaInput from \"./components/dialog/DiaInput\";\nimport waifu from \"@characters/waifu/waifu\";\nimport { Emotion } from \"@ctypes/character\";\nimport { useInitChat } from \"./components/fetchChat\";\nimport { useSocket } from \"./components/socket\";\n\nconst App = () => {\n  const [dialog, setDialog] = useState<DialogMessage[]>([\n    {\n      text: \"Nyet\",\n      character_name: \"Waifu\",\n    },\n    {\n      text: \"Pamagi\",\n      character_name: \"Semen\",\n    },\n    {\n      text: \"Whoooma apoooma a aboba perdola. Superhyper gigachad. Hhuy uu ii asli epasue. Saoeurp.\",\n      character_name: \"Semen\",\n    },\n  ]);\n\n  const [account, setAccount] = useState<string | undefined>();\n  const [currentWaifuEmotion, setWaifuEmotion] = useState<Emotion>(\"standart\");\n\n  const addDialogMessage = (text: string, character_name: string) => {\n    setDialog((curDia) => [...curDia, { text, character_name }]);\n  };\n\n  useInitChat(setDialog, setAccount);\n\n  useSocket(setWaifuEmotion, account);\n\n  const sendMessage = (msg: string) => {\n    addDialogMessage(msg, \"Semen\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"novelWrapper\">\n        <img src={background} className=\"bcg\" />\n        <section className=\"characters\">\n          {<Character character={waifu} emotion={currentWaifuEmotion} />}\n        </section>\n        <Dialog dialog={dialog} />\n        <DiaInput sendMessage={sendMessage} />\n        {/* <h4 className=\"charName\">Examplia</h4> */}\n        {/* <p>Bla bla bla</p> */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { BackEmotions, BackMessage } from \"./fetchChat\";\n\nconst convertWaifuEmotion = ({ NEGATIVE, NEUTRAL, POSITIVE }: BackEmotions) => {\n  // if (POSITIVE > NEGATIVE && POSITIVE > NEUTRAL) return \"happy\";\n  if (POSITIVE > NEGATIVE && POSITIVE > NEUTRAL) return \"positive\";\n  if (NEGATIVE > POSITIVE && NEGATIVE > NEUTRAL) return \"negative\";\n  return \"standart\";\n};\n\nexport const useSocket = (\n  setWaifuEmotion: Dispatch<SetStateAction<string>>,\n  account: string | undefined\n) => {\n  useEffect(() => {\n    if (!account) return;\n\n    const socket = new WebSocket(`ws://localhost/chats/${account}`);\n\n    socket.onopen = (e) => {\n      // socket.send(\"Hello, server\");\n      console.log(\"SOCKET OPENED\");\n    };\n\n    socket.onmessage = (e) => {\n      // console.log(e);\n      const newMessage = e.data as BackMessage;\n      const emotion = convertWaifuEmotion(newMessage.emotions);\n      // const waifuEmotion = String(e.data);\n      setWaifuEmotion(emotion);\n    };\n  }, [account, setWaifuEmotion]);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// reportWebVitals();\n"],"sourceRoot":""}